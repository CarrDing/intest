/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "INTEST"
 */
package com.intest.asn;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Size;

import org.asnlab.asndt.runtime.conv.AnnotationChoiceConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.ChoiceConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.IntegerConverter;
import org.asnlab.asndt.runtime.conv.VectorConverter;
import org.asnlab.asndt.runtime.conv.annotation.Alternative;
import org.asnlab.asndt.runtime.type.AsnType;

public class FaultStruct {

	public static final int vfStateChosen = 0;
	public static final int vf1939Chosen = 1;
	public static final int vfCustmChosen = 2;

	public final int choiceID;

	@Min(1L) @Max(255L)
	@Alternative(0)
	public final Integer vfState;

	@Size(min=1, max=256)
	@Alternative(1)
	public final Vector<FaultData> vf1939;

	@Size(min=1, max=256)
	@Alternative(2)
	public final Vector<FaultData> vfCustm;


	private FaultStruct(int choiceID, Integer vfState, Vector<FaultData> vf1939, Vector<FaultData> vfCustm) {
		this.choiceID = choiceID;
		this.vfState = vfState;
		this.vf1939 = vf1939;
		this.vfCustm = vfCustm;
	}

	public static FaultStruct vfState(Integer vfState) {
		return new FaultStruct(vfStateChosen, vfState, null, null);
	}

	public static FaultStruct vf1939(Vector<FaultData> vf1939) {
		return new FaultStruct(vf1939Chosen, null, vf1939, null);
	}

	public static FaultStruct vfCustm(Vector<FaultData> vfCustm) {
		return new FaultStruct(vfCustmChosen, null, null, vfCustm);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof FaultStruct)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static FaultStruct der_decode(InputStream in) throws IOException {
		return (FaultStruct)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = INTEST.type(65570);

	public final static ChoiceConverter CONV;

	static {
		CONV = new AnnotationChoiceConverter(FaultStruct.class);
		AsnConverter vfStateConverter = IntegerConverter.INSTANCE;
		AsnConverter vf1939Converter = new VectorConverter(FaultData.CONV);
		AsnConverter vfCustmConverter = new VectorConverter(FaultData.CONV);
		CONV.setAlternativeConverters(new AsnConverter[] { vfStateConverter, vf1939Converter, vfCustmConverter });
	}


}

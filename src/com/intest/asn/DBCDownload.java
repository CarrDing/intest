/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "INTEST"
 */
package com.intest.asn;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;

import org.asnlab.asndt.runtime.conv.AnnotationChoiceConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.ChoiceConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.IntegerConverter;
import org.asnlab.asndt.runtime.conv.annotation.Alternative;
import org.asnlab.asndt.runtime.type.AsnType;

public class DBCDownload {

	public static final int dbcDownReqChosen = 0;
	public static final int dbcDownRspChosen = 1;

	public final int choiceID;

	@Alternative(0)
	public final DBCDownReq dbcDownReq;

	@Min(0L) @Max(5L)
	@Alternative(1)
	public final Integer dbcDownRsp;


	private DBCDownload(int choiceID, DBCDownReq dbcDownReq, Integer dbcDownRsp) {
		this.choiceID = choiceID;
		this.dbcDownReq = dbcDownReq;
		this.dbcDownRsp = dbcDownRsp;
	}

	public static DBCDownload dbcDownReq(DBCDownReq dbcDownReq) {
		return new DBCDownload(dbcDownReqChosen, dbcDownReq, null);
	}

	public static DBCDownload dbcDownRsp(Integer dbcDownRsp) {
		return new DBCDownload(dbcDownRspChosen, null, dbcDownRsp);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof DBCDownload)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static DBCDownload der_decode(InputStream in) throws IOException {
		return (DBCDownload)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = INTEST.type(65575);

	public final static ChoiceConverter CONV;

	static {
		CONV = new AnnotationChoiceConverter(DBCDownload.class);
		AsnConverter dbcDownReqConverter = DBCDownReq.CONV;
		AsnConverter dbcDownRspConverter = IntegerConverter.INSTANCE;
		CONV.setAlternativeConverters(new AsnConverter[] { dbcDownReqConverter, dbcDownRspConverter });
	}


}

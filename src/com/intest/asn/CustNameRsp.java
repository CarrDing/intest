/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "INTEST"
 */
package com.intest.asn;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Size;

import org.asnlab.asndt.runtime.conv.AnnotationChoiceConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.ChoiceConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.IntegerConverter;
import org.asnlab.asndt.runtime.conv.VectorConverter;
import org.asnlab.asndt.runtime.conv.annotation.Alternative;
import org.asnlab.asndt.runtime.type.AsnType;

public class CustNameRsp {

	public static final int rspErrChosen = 0;
	public static final int custNameChosen = 1;

	public final int choiceID;

	@Min(1L) @Max(100L)
	@Alternative(0)
	public final Integer rspErr;

	@Size(min=1, max=1000)
	@Alternative(1)
	public final Vector<CustName> custName;


	private CustNameRsp(int choiceID, Integer rspErr, Vector<CustName> custName) {
		this.choiceID = choiceID;
		this.rspErr = rspErr;
		this.custName = custName;
	}

	public static CustNameRsp rspErr(Integer rspErr) {
		return new CustNameRsp(rspErrChosen, rspErr, null);
	}

	public static CustNameRsp custName(Vector<CustName> custName) {
		return new CustNameRsp(custNameChosen, null, custName);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof CustNameRsp)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static CustNameRsp der_decode(InputStream in) throws IOException {
		return (CustNameRsp)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = INTEST.type(65553);

	public final static ChoiceConverter CONV;

	static {
		CONV = new AnnotationChoiceConverter(CustNameRsp.class);
		AsnConverter rspErrConverter = IntegerConverter.INSTANCE;
		AsnConverter custNameConverter = new VectorConverter(CustName.CONV);
		CONV.setAlternativeConverters(new AsnConverter[] { rspErrConverter, custNameConverter });
	}


}

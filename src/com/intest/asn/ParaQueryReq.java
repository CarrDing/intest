/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "INTEST"
 */
package com.intest.asn;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.validation.constraints.Null;

import org.asnlab.asndt.runtime.conv.AnnotationCompositeConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.BooleanConverter;
import org.asnlab.asndt.runtime.conv.CompositeConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.annotation.Component;
import org.asnlab.asndt.runtime.type.AsnType;

public class ParaQueryReq {

	@Null
	@Component(0)
	public Boolean intReq;	/* OPTIONAL */

	@Null
	@Component(1)
	public Boolean link1Req;	/* OPTIONAL */

	@Null
	@Component(2)
	public Boolean link2Req;	/* OPTIONAL */

	@Null
	@Component(3)
	public Boolean link2EnReq;	/* OPTIONAL */

	@Null
	@Component(4)
	public Boolean vinReq;	/* OPTIONAL */

	@Null
	@Component(5)
	public Boolean destReq;	/* OPTIONAL */

	@Null
	@Component(6)
	public Boolean boundReq;	/* OPTIONAL */

	@Null
	@Component(7)
	public Boolean dbcNameReq;	/* OPTIONAL */

	@Null
	@Component(8)
	public Boolean sysReq;	/* OPTIONAL */

	@Null
	@Component(9)
	public Boolean sdHzReq;	/* OPTIONAL */

	@Null
	@Component(10)
	public Boolean authKeyReq;	/* OPTIONAL */

	@Null
	@Component(11)
	public Boolean commIntReq;	/* OPTIONAL */

	@Null
	@Component(12)
	public Boolean canlogModeReq;	/* OPTIONAL */

	@Null
	@Component(13)
	public Boolean canlogTimeReq;	/* OPTIONAL */

	@Null
	@Component(14)
	public CustNameReq custNameReq;	/* OPTIONAL */

	@Null
	@Component(15)
	public Boolean sdCapReq;	/* OPTIONAL */

	@Null
	@Component(16)
	public DirFileNo fileDirReq;	/* OPTIONAL */

	@Null
	@Component(17)
	public UploadFile upFileReq;	/* OPTIONAL */


	public boolean equals(Object obj) {
		if(!(obj instanceof ParaQueryReq)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static ParaQueryReq der_decode(InputStream in) throws IOException {
		return (ParaQueryReq)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = INTEST.type(65551);

	public final static CompositeConverter CONV;

	static {
		CONV = new AnnotationCompositeConverter(ParaQueryReq.class);
		AsnConverter intReqConverter = BooleanConverter.INSTANCE;
		AsnConverter link1ReqConverter = BooleanConverter.INSTANCE;
		AsnConverter link2ReqConverter = BooleanConverter.INSTANCE;
		AsnConverter link2EnReqConverter = BooleanConverter.INSTANCE;
		AsnConverter vinReqConverter = BooleanConverter.INSTANCE;
		AsnConverter destReqConverter = BooleanConverter.INSTANCE;
		AsnConverter boundReqConverter = BooleanConverter.INSTANCE;
		AsnConverter dbcNameReqConverter = BooleanConverter.INSTANCE;
		AsnConverter sysReqConverter = BooleanConverter.INSTANCE;
		AsnConverter sdHzReqConverter = BooleanConverter.INSTANCE;
		AsnConverter authKeyReqConverter = BooleanConverter.INSTANCE;
		AsnConverter commIntReqConverter = BooleanConverter.INSTANCE;
		AsnConverter canlogModeReqConverter = BooleanConverter.INSTANCE;
		AsnConverter canlogTimeReqConverter = BooleanConverter.INSTANCE;
		AsnConverter custNameReqConverter = CustNameReq.CONV;
		AsnConverter sdCapReqConverter = BooleanConverter.INSTANCE;
		AsnConverter fileDirReqConverter = DirFileNo.CONV;
		AsnConverter upFileReqConverter = UploadFile.CONV;
		CONV.setComponentConverters(new AsnConverter[] { intReqConverter, link1ReqConverter, link2ReqConverter, link2EnReqConverter, vinReqConverter, destReqConverter, boundReqConverter, dbcNameReqConverter, sysReqConverter, sdHzReqConverter, authKeyReqConverter, commIntReqConverter, canlogModeReqConverter, canlogTimeReqConverter, custNameReqConverter, sdCapReqConverter, fileDirReqConverter, upFileReqConverter });
	}


}

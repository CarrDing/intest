/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "INTEST"
 */
package com.intest.asn;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.asnlab.asndt.runtime.conv.AnnotationChoiceConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.ChoiceConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.annotation.Alternative;
import org.asnlab.asndt.runtime.type.AsnType;

public class ChoiceData {

	public static final int logInOutChosen = 0;
	public static final int paraSetQueryChosen = 1;
	public static final int dataReportChosen = 2;
	public static final int rmtControlChosen = 3;
	public static final int eventReportChosen = 4;
	public static final int fileTransChosen = 5;

	public final int choiceID;

	@Alternative(0)
	public final ChoiceLogInOut logInOut;

	@Alternative(1)
	public final ParaSetQuery paraSetQuery;

	@Alternative(2)
	public final DataReport dataReport;

	@Alternative(3)
	public final RmtControl rmtControl;

	@Alternative(4)
	public final EventReport eventReport;

	@Alternative(5)
	public final FileTrans fileTrans;


	private ChoiceData(int choiceID, ChoiceLogInOut logInOut, ParaSetQuery paraSetQuery, DataReport dataReport, RmtControl rmtControl, EventReport eventReport, FileTrans fileTrans) {
		this.choiceID = choiceID;
		this.logInOut = logInOut;
		this.paraSetQuery = paraSetQuery;
		this.dataReport = dataReport;
		this.rmtControl = rmtControl;
		this.eventReport = eventReport;
		this.fileTrans = fileTrans;
	}

	public static ChoiceData logInOut(ChoiceLogInOut logInOut) {
		return new ChoiceData(logInOutChosen, logInOut, null, null, null, null, null);
	}

	public static ChoiceData paraSetQuery(ParaSetQuery paraSetQuery) {
		return new ChoiceData(paraSetQueryChosen, null, paraSetQuery, null, null, null, null);
	}

	public static ChoiceData dataReport(DataReport dataReport) {
		return new ChoiceData(dataReportChosen, null, null, dataReport, null, null, null);
	}

	public static ChoiceData rmtControl(RmtControl rmtControl) {
		return new ChoiceData(rmtControlChosen, null, null, null, rmtControl, null, null);
	}

	public static ChoiceData eventReport(EventReport eventReport) {
		return new ChoiceData(eventReportChosen, null, null, null, null, eventReport, null);
	}

	public static ChoiceData fileTrans(FileTrans fileTrans) {
		return new ChoiceData(fileTransChosen, null, null, null, null, null, fileTrans);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof ChoiceData)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static ChoiceData der_decode(InputStream in) throws IOException {
		return (ChoiceData)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = INTEST.type(65577);

	public final static ChoiceConverter CONV;

	static {
		CONV = new AnnotationChoiceConverter(ChoiceData.class);
		AsnConverter logInOutConverter = ChoiceLogInOut.CONV;
		AsnConverter paraSetQueryConverter = ParaSetQuery.CONV;
		AsnConverter dataReportConverter = DataReport.CONV;
		AsnConverter rmtControlConverter = RmtControl.CONV;
		AsnConverter eventReportConverter = EventReport.CONV;
		AsnConverter fileTransConverter = FileTrans.CONV;
		CONV.setAlternativeConverters(new AsnConverter[] { logInOutConverter, paraSetQueryConverter, dataReportConverter, rmtControlConverter, eventReportConverter, fileTransConverter });
	}


}

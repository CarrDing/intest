/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "INTEST"
 */
package com.intest.asn;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.asnlab.asndt.runtime.conv.AnnotationChoiceConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.BooleanConverter;
import org.asnlab.asndt.runtime.conv.ChoiceConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.annotation.Alternative;
import org.asnlab.asndt.runtime.type.AsnType;

public class TerminalStat {

	public static final int terminalReportChosen = 0;
	public static final int terminalReqChosen = 1;
	public static final int terminalRspChosen = 2;

	public final int choiceID;

	@Alternative(0)
	public final TerminalReport terminalReport;

	@Alternative(1)
	public final Boolean terminalReq;

	@Alternative(2)
	public final TerminalReport terminalRsp;


	private TerminalStat(int choiceID, TerminalReport terminalReport, Boolean terminalReq, TerminalReport terminalRsp) {
		this.choiceID = choiceID;
		this.terminalReport = terminalReport;
		this.terminalReq = terminalReq;
		this.terminalRsp = terminalRsp;
	}

	public static TerminalStat terminalReport(TerminalReport terminalReport) {
		return new TerminalStat(terminalReportChosen, terminalReport, null, null);
	}

	public static TerminalStat terminalReq(Boolean terminalReq) {
		return new TerminalStat(terminalReqChosen, null, terminalReq, null);
	}

	public static TerminalStat terminalRsp(TerminalReport terminalRsp) {
		return new TerminalStat(terminalRspChosen, null, null, terminalRsp);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof TerminalStat)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static TerminalStat der_decode(InputStream in) throws IOException {
		return (TerminalStat)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = INTEST.type(65561);

	public final static ChoiceConverter CONV;

	static {
		CONV = new AnnotationChoiceConverter(TerminalStat.class);
		AsnConverter terminalReportConverter = TerminalReport.CONV;
		AsnConverter terminalReqConverter = BooleanConverter.INSTANCE;
		AsnConverter terminalRspConverter = TerminalReport.CONV;
		CONV.setAlternativeConverters(new AsnConverter[] { terminalReportConverter, terminalReqConverter, terminalRspConverter });
	}


}

/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "INTEST"
 */
package com.intest.asn;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.asnlab.asndt.runtime.conv.AnnotationChoiceConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.BooleanConverter;
import org.asnlab.asndt.runtime.conv.ChoiceConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.annotation.Alternative;
import org.asnlab.asndt.runtime.type.AsnType;

public class DestRsp {

	public static final int locatNullChosen = 0;
	public static final int locatRspChosen = 1;

	public final int choiceID;

	@Alternative(0)
	public final Boolean locatNull;

	@Alternative(1)
	public final LongiLatiTude locatRsp;


	private DestRsp(int choiceID, Boolean locatNull, LongiLatiTude locatRsp) {
		this.choiceID = choiceID;
		this.locatNull = locatNull;
		this.locatRsp = locatRsp;
	}

	public static DestRsp locatNull(Boolean locatNull) {
		return new DestRsp(locatNullChosen, locatNull, null);
	}

	public static DestRsp locatRsp(LongiLatiTude locatRsp) {
		return new DestRsp(locatRspChosen, null, locatRsp);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof DestRsp)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static DestRsp der_decode(InputStream in) throws IOException {
		return (DestRsp)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = INTEST.type(65543);

	public final static ChoiceConverter CONV;

	static {
		CONV = new AnnotationChoiceConverter(DestRsp.class);
		AsnConverter locatNullConverter = BooleanConverter.INSTANCE;
		AsnConverter locatRspConverter = LongiLatiTude.CONV;
		CONV.setAlternativeConverters(new AsnConverter[] { locatNullConverter, locatRspConverter });
	}


}

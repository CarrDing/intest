/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "INTEST"
 */
package com.intest.asn;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;

import org.asnlab.asndt.runtime.conv.AnnotationCompositeConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.CompositeConverter;
import org.asnlab.asndt.runtime.conv.DoubleConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.IntegerConverter;
import org.asnlab.asndt.runtime.conv.LongConverter;
import org.asnlab.asndt.runtime.conv.annotation.Component;
import org.asnlab.asndt.runtime.type.AsnType;

public class TerminalReport {

	@NotNull
	@Component(0)
	public Double voltage;

	@NotNull
	@Min(0L) @Max(4294967295L)
	@Component(1)
	public Long workStatus;

	@NotNull
	@Min(0L) @Max(100L)
	@Component(2)
	public Integer ant;

	@NotNull
	@Component(3)
	public GpsLocation gpsLocation;

	@NotNull
	@Component(4)
	public Long rebootCnt;

	@NotNull
	@Component(5)
	public Long sysRunTime;

	@NotNull
	@Component(6)
	public Long gprsFlowCnt;


	public boolean equals(Object obj) {
		if(!(obj instanceof TerminalReport)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static TerminalReport der_decode(InputStream in) throws IOException {
		return (TerminalReport)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = INTEST.type(65560);

	public final static CompositeConverter CONV;

	static {
		CONV = new AnnotationCompositeConverter(TerminalReport.class);
		AsnConverter voltageConverter = DoubleConverter.INSTANCE;
		AsnConverter workStatusConverter = LongConverter.INSTANCE;
		AsnConverter antConverter = IntegerConverter.INSTANCE;
		AsnConverter gpsLocationConverter = GpsLocation.CONV;
		AsnConverter rebootCntConverter = LongConverter.INSTANCE;
		AsnConverter sysRunTimeConverter = LongConverter.INSTANCE;
		AsnConverter gprsFlowCntConverter = LongConverter.INSTANCE;
		CONV.setComponentConverters(new AsnConverter[] { voltageConverter, workStatusConverter, antConverter, gpsLocationConverter, rebootCntConverter, sysRunTimeConverter, gprsFlowCntConverter });
	}


}

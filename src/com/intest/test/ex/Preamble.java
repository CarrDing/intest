/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "EX"
 */
package com.intest.test.ex;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.validation.constraints.NotNull;

import org.asnlab.asndt.runtime.conv.AnnotationCompositeConverter;
import org.asnlab.asndt.runtime.conv.AsnConverter;
import org.asnlab.asndt.runtime.conv.CompositeConverter;
import org.asnlab.asndt.runtime.conv.EncodingRules;
import org.asnlab.asndt.runtime.conv.LongConverter;
import org.asnlab.asndt.runtime.conv.annotation.Component;
import org.asnlab.asndt.runtime.type.AsnType;

public class Preamble {

	@NotNull
	@Component(0)
	public Long name;


	public boolean equals(Object obj) {
		if(!(obj instanceof Preamble)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void der_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV, out);
	}

	public static Preamble der_decode(InputStream in) throws IOException {
		return (Preamble)TYPE.decode(in, EncodingRules.DISTINGUISHED_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = EX.type(65537);

	public final static CompositeConverter CONV;

	static {
		CONV = new AnnotationCompositeConverter(Preamble.class);
		AsnConverter nameConverter = LongConverter.INSTANCE;
		CONV.setComponentConverters(new AsnConverter[] { nameConverter });
	}


}
